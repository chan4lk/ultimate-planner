# Ultimate Planner - Enterprise Authentication System
# Docker Compose for complete development/production environment

services:
  # Redis - Session Management & Caching
  redis:
    image: redis:7-alpine
    container_name: ultimate-planner-redis
    restart: unless-stopped
    command: >
      redis-server 
      --appendonly yes 
      --appendfsync everysec
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - "6379:6379"
    networks:
      - ultimate-planner-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  # PostgreSQL - Primary Database
  postgres:
    image: postgres:15-alpine
    container_name: ultimate-planner-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-ultimate_planner}
      POSTGRES_USER: ${POSTGRES_USER:-app_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_change_me}
      POSTGRES_INITDB_ARGS: "--auth-host=md5"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    networks:
      - ultimate-planner-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-app_user} -d ${POSTGRES_DB:-ultimate_planner}"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  # Ultimate Planner Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: ultimate-planner-app
    restart: unless-stopped
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    environment:
      # Database Configuration
      DATABASE_URL: postgresql://${POSTGRES_USER:-app_user}:${POSTGRES_PASSWORD:-secure_password_change_me}@postgres:5432/${POSTGRES_DB:-ultimate_planner}
      
      # Redis Configuration
      REDIS_URL: redis://redis:6379
      
      # Security Configuration
      SECRET_KEY: ${SECRET_KEY:-your_256_bit_secret_key_change_this_in_production}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-your_jwt_secret_key_change_this}
      
      # Session Configuration
      SESSION_EXPIRE_SECONDS: ${SESSION_EXPIRE_SECONDS:-3600}
      REMEMBER_ME_EXPIRE_SECONDS: ${REMEMBER_ME_EXPIRE_SECONDS:-2592000}
      
      # MFA Configuration
      TOTP_ISSUER: ${TOTP_ISSUER:-UltimatePlanner}
      TOTP_DIGITS: ${TOTP_DIGITS:-6}
      TOTP_INTERVAL: ${TOTP_INTERVAL:-30}
      
      # OAuth Configuration
      MICROSOFT_CLIENT_ID: ${MICROSOFT_CLIENT_ID}
      MICROSOFT_CLIENT_SECRET: ${MICROSOFT_CLIENT_SECRET}
      MICROSOFT_TENANT: ${MICROSOFT_TENANT:-common}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      GITHUB_CLIENT_ID: ${GITHUB_CLIENT_ID}
      GITHUB_CLIENT_SECRET: ${GITHUB_CLIENT_SECRET}
      NOTION_CLIENT_ID: ${NOTION_CLIENT_ID}
      NOTION_CLIENT_SECRET: ${NOTION_CLIENT_SECRET}
      
      # Rate Limiting Configuration
      RATE_LIMIT_REQUESTS: ${RATE_LIMIT_REQUESTS:-5}
      RATE_LIMIT_WINDOW: ${RATE_LIMIT_WINDOW:-300}
      
      # Environment
      ENVIRONMENT: ${ENVIRONMENT:-development}
      LOG_LEVEL: ${LOG_LEVEL:-debug}
      
    ports:
      - "8000:8000"
    volumes:
      - ./app:/app/app
      - ./alembic:/app/alembic
      - ./config:/app/config
      - app_logs:/app/logs
      - app_data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ultimate-planner-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx - Reverse Proxy & Load Balancer
  nginx:
    image: nginx:alpine
    container_name: ultimate-planner-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - app
    networks:
      - ultimate-planner-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Commander - Redis Management UI (Development)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: ultimate-planner-redis-ui
    restart: unless-stopped
    environment:
      REDIS_HOSTS: local:redis:6379
      HTTP_USER: ${REDIS_UI_USER:-admin}
      HTTP_PASSWORD: ${REDIS_UI_PASSWORD:-admin}
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - ultimate-planner-network
    profiles:
      - development

  # pgAdmin - PostgreSQL Management UI (Development)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: ultimate-planner-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@ultimateplanner.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
      PGADMIN_LISTEN_PORT: 80
    ports:
      - "8082:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - ultimate-planner-network
    profiles:
      - development

# Named volumes for persistent data
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_logs:
    driver: local
  app_data:
    driver: local
  nginx_logs:
    driver: local
  pgadmin_data:
    driver: local

# Custom network
networks:
  ultimate-planner-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16